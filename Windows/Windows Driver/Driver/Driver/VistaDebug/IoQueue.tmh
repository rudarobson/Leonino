//a1af5ea3e0eca1e37c2d92e530303c22 Generated File. Do not edit.
// File created by WPP compiler version 0.01-Sat Jun  2 07:48:39 2012
// from template C:\Program Files (x86)\Windows Kits\8.0\bin\wppconfig\rev1\um-default.tpl

// template C:\Program Files (x86)\Windows Kits\8.0\bin\wppconfig\rev1\um-header.tpl
#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE IoQueue_cpp

#ifndef WPP_ALREADY_INCLUDED

#ifndef USER_MODE_NATIVE_ETW
#ifdef BUILD_MINWIN
#include <windowscore.h>
#else
#include <windows.h>
#endif
#endif

#include <wmistr.h>
#include <evntrace.h>
#ifndef WPP_TRACE_W2K_COMPATABILITY
#include <sddl.h>
#endif

#if defined(__cplusplus)
extern "C" {
#endif

#ifdef USER_MODE_NATIVE_ETW
#define WPP_USE_NTDLL_FUNCTIONS

typedef 
ULONG 
(__stdcall *WMIDPREQUEST)(
    _In_ WMIDPREQUESTCODE RequestCode,
    _In_ PVOID RequestContext,
    _Inout_ ULONG *BufferSize,
    _Inout_ PVOID Buffer
    );

typedef struct  _TRACE_GUID_REGISTRATION {
    LPCGUID Guid;            // Guid of data block being registered or updated.
    HANDLE RegHandle;        // Guid Registration Handle is returned.
} TRACE_GUID_REGISTRATION, *PTRACE_GUID_REGISTRATION;

#endif

// LEGACY: This structure was used by Win2k RpcRt4 and cluster tracing

typedef struct _WPP_WIN2K_CONTROL_BLOCK {
    TRACEHANDLE Logger;
    ULONG Flags;
    ULONG Level;
    LPCGUID ControlGuid;
} WPP_WIN2K_CONTROL_BLOCK, *PWPP_WIN2K_CONTROL_BLOCK;

#pragma warning(push)
#pragma warning(disable:4201) // nonstandard extension used nameless struct/union

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    struct _WPP_TRACE_CONTROL_BLOCK *Next;
    TRACEHANDLE     UmRegistrationHandle;
    union {
        TRACEHANDLE              Logger;
        PWPP_WIN2K_CONTROL_BLOCK Win2kCb;
        PVOID                    Ptr;
        struct _WPP_TRACE_CONTROL_BLOCK *Cb;
    };
    
    UCHAR           FlagsLen; 
    UCHAR           Level; 
    USHORT          Options;
    ULONG           Flags[1];
    LPCGUID         ControlGuid;
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;
#pragma warning(pop)

#ifdef WPP_USE_NTDLL_FUNCTIONS

ULONG
__stdcall
EtwTraceMessage(
    _In_ TRACEHANDLE LoggerHandle,
    _In_ ULONG MessageFlags,
    _In_ LPCGUID MessageGuid,
    _In_ USHORT MessageNumber,
    ...
    );

TRACEHANDLE
__stdcall
EtwGetTraceLoggerHandle(
    _In_ PVOID Buffer
    );

UCHAR
__stdcall
EtwGetTraceEnableLevel(
    _In_ TRACEHANDLE LoggerHandle
    );

ULONG
__stdcall
EtwGetTraceEnableFlags(
    _In_ TRACEHANDLE LoggerHandle
    );

ULONG 
__stdcall
EtwRegisterTraceGuidsW(
    _In_ WMIDPREQUEST RequestAddress,
    _In_ PVOID RequestContext,
    _In_ LPCGUID ControlGuid,
    _In_ ULONG GuidCount,
    _In_ PTRACE_GUID_REGISTRATION GuidReg,
    _In_opt_ LPCWSTR MofImagePath,
    _In_opt_ LPCWSTR MofResourceName,
    _Out_ PTRACEHANDLE RegistrationHandle
    );

ULONG
__stdcall
EtwUnregisterTraceGuids(
    _In_ TRACEHANDLE RegistrationHandle
    );

#define WPP_TRACE                   EtwTraceMessage
#define WPP_GET_TRACE_LOGGER_HANDLE EtwGetTraceLoggerHandle
#define WPP_GET_TRACE_ENABLE_LEVEL  EtwGetTraceEnableLevel
#define WPP_GET_TRACE_ENABLE_FLAGS  EtwGetTraceEnableFlags
#define WPP_REGISTER_TRACE_GUIDS    EtwRegisterTraceGuidsW
#define WPP_UNREGISTER_TRACE_GUIDS  EtwUnregisterTraceGuids

#endif

#define WPP_IsValidSid IsValidSid
#define WPP_GetLengthSid GetLengthSid

#ifndef WPP_TRACE
#define WPP_TRACE TraceMessage
#endif

#ifndef WPP_UNREGISTER_TRACE_GUIDS
#define WPP_UNREGISTER_TRACE_GUIDS  UnregisterTraceGuids 
#endif


#ifndef WPP_REGISTER_TRACE_GUIDS 
#define WPP_REGISTER_TRACE_GUIDS  RegisterTraceGuids
#endif


#ifndef WPP_GET_TRACE_LOGGER_HANDLE
#define WPP_GET_TRACE_LOGGER_HANDLE  GetTraceLoggerHandle
#endif

#ifndef WPP_GET_TRACE_ENABLE_LEVEL 
#define WPP_GET_TRACE_ENABLE_LEVEL  GetTraceEnableLevel
#endif

#ifndef WPP_GET_TRACE_ENABLE_FLAGS 
#define WPP_GET_TRACE_ENABLE_FLAGS  GetTraceEnableFlags
#endif

enum {
    WPP_VER_WIN2K_CB_FORWARD_PTR    = 0x01,
    WPP_VER_WHISTLER_CB_FORWARD_PTR = 0x02,
    WPP_VER_LH_CB_FORWARD_PTR = 0x03
};

VOID WppCleanupUm( VOID );
#define WPP_CLEANUP() WppCleanupUm()

#define WppLoadTracingSupport 

//
// For getting private callback, implement a function with the signature below.
// To register the function: #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback
// If multiple control guids are used, be sure to compare Guid to the one of interest.
//

#if defined(WPP_PRIVATE_ENABLE_CALLBACK)

typedef
VOID
(NTAPI *PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    _In_ LPCGUID Guid,   
    _In_ TRACEHANDLE Logger, 
    _In_ BOOLEAN Enable, 
    _In_ ULONG Flags,    
    _In_ UCHAR Level
    );  

#endif

//
// For generating CAPTURE_STATE callback (Win7+), implement a function with the signature
// below. To register the function: #define WPP_CAPTURE_STATE_CALLBACK MyCaptureStateCallback
// If multiple control guids are used, be sure to compare Guid to the one of interest.
//

#if defined(WPP_CAPTURE_STATE_CALLBACK)

typedef
VOID
(NTAPI *PFN_WPP_CAPTURE_STATE_CALLBACK)(
    _In_ LPCGUID Guid,   
    _In_ TRACEHANDLE Logger, 
    _In_ ULONG Flags,    
    _In_ UCHAR Level
    );

#endif

#if defined(__cplusplus)
};
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED


 
#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

// template C:\Program Files (x86)\Windows Kits\8.0\bin\wppconfig\rev1\control.tpl
//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )        

#if defined(__cplusplus)
extern "C" {
#endif

#if !defined(WPP_NO_CONTROL_GUIDS)

#if defined(WPP_DEFAULT_CONTROL_GUID)
#  if defined(WPP_CONTROL_GUIDS)
#     pragma message(__FILE__ " : error : WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS")
#     stop
#  else
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif      
#endif

#if !defined(WPP_CONTROL_GUIDS)
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
stop.
#endif
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_NORM(l,w1,w2,w3,ll) l ## w1 ## w2 ## w3 ## ll
#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#if !defined(WPP_OLDCC)
#define WPP_FORCEINLINE __forceinline
#else
#define WPP_FORCEINLINE __inline
#endif
#endif


// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)), 
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

//
// Check that maximum number of flags does not exceed 32
//
#ifndef C_ASSERT
#define C_ASSERT(e) typedef char __C_ASSERT__[(e)?1:-1]
#endif

#define MAX_NUMBER_OF_ETW_FLAGS 34 // 32 flags plus 2 separators
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) && ((WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name) & 0xFFFF)) < MAX_NUMBER_OF_ETW_FLAGS)
enum _WPP_FLAG_LEN_ENUM_MAX { WPP_MAX_FLAG_LEN_CHECK = (1 WPP_CONTROL_GUIDS) }; 
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#  define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;      
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;

 
extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

#ifndef WPP_USE_TRACE_LEVELS
// For historical reasons the use of LEVEL could imply flags, this was a bad choice but very difficult
// to undo.
#if !defined(WPP_LEVEL_LOGGER)
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger), 
#endif

#if !defined(WPP_LEVEL_ENABLED)
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL)) 
#endif
#else  //  #ifndef WPP_USE_TRACE_LEVELS
#if !defined(WPP_LEVEL_LOGGER)
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif

#if !defined(WPP_LEVEL_ENABLED)
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif
#endif  // #ifndef WPP_USE_TRACE_LEVELS

#if !defined(WPP_FLAG_LOGGER)
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger), 
#endif


#if !defined(WPP_FLAG_ENABLED)
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL)) 
#endif

#if !defined(WPP_LOGGER_ARG)
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#if !defined(WPP_GET_LOGGER)
#  define WPP_GET_LOGGER Logger
#endif

#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#if defined(__cplusplus)
};
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED


#if defined(__cplusplus)
extern "C" {
#endif

#ifndef WPP_ALREADY_INCLUDED

// template C:\Program Files (x86)\Windows Kits\8.0\bin\wppconfig\rev1\tracemacro.tpl
//   expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING 1
#endif
#endif

#define WPP_EVAL(_value_) _value_
#define WPP_(Id) WPP_EVAL(WPP_) ## WPP_EVAL(Id) ## WPP_EVAL(_) ## WPP_EVAL(WPP_THIS_FILE) ## WPP_EVAL(__LINE__)

#if !defined(WPP_INLINE)
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#else   // #ifndef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids

#endif  // #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_NO_ANNOTATIONS)

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_IoQueue_cpp110
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_IoQueue_cpp124
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_IoQueue_cpp141
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_IoQueue_cpp163
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_IoQueue_cpp184
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_IoQueue_cpp227
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_IoQueue_cpp231
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_IoQueue_cpp270
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_IoQueue_cpp46
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_IoQueue_cpp54
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_IoQueue_cpp67
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_IoQueue_cpp78
#endif
#ifdef WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME L" FUNC=" _WPPW(__FUNCTION__)
#else
#define WPP_FUNC_NAME
#endif

#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_IoQueue_cpp110_FINAL(P, File, Name, ...)    __annotation(L ## P, L"a35eafa1-ece0-e3a1-7c2d-92e530303c22 Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 14 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_IoQueue_cpp110_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 14 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_IoQueue_cpp110
    #define WPP_ANNOTATE_IoQueue_cpp110 WPP_ANNOTATE_IoQueue_cpp110_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_IoQueue_cpp110 WPP_ANNOTATE_IoQueue_cpp110_FINAL("TMF:", "IoQueue.cpp", "IoQueue_cpp110", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_IoQueue_cpp124_FINAL(P, File, Name, ...)    __annotation(L ## P, L"a35eafa1-ece0-e3a1-7c2d-92e530303c22 Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 15 \"%0%!FUNC! Failed to query IUnknown interface %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_IoQueue_cpp124_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 15 \"%0%!FUNC! Failed to query IUnknown interface %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_IoQueue_cpp124
    #define WPP_ANNOTATE_IoQueue_cpp124 WPP_ANNOTATE_IoQueue_cpp124_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemHRESULT -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_IoQueue_cpp124 WPP_ANNOTATE_IoQueue_cpp124_FINAL("TMF:", "IoQueue.cpp", "IoQueue_cpp124", L"{", L"hr, ItemHRESULT -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_IoQueue_cpp141_FINAL(P, File, Name, ...)    __annotation(L ## P, L"a35eafa1-ece0-e3a1-7c2d-92e530303c22 Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 16 \"%0%!FUNC! Failed to create framework queue.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_IoQueue_cpp141_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 16 \"%0%!FUNC! Failed to create framework queue.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_IoQueue_cpp141
    #define WPP_ANNOTATE_IoQueue_cpp141 WPP_ANNOTATE_IoQueue_cpp141_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_IoQueue_cpp141 WPP_ANNOTATE_IoQueue_cpp141_FINAL("TMF:", "IoQueue.cpp", "IoQueue_cpp141", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_IoQueue_cpp163_FINAL(P, File, Name, ...)    __annotation(L ## P, L"a35eafa1-ece0-e3a1-7c2d-92e530303c22 Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 17 \"%0%!FUNC! Failed to configure request dispatching %10!s!.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_IoQueue_cpp163_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 17 \"%0%!FUNC! Failed to configure request dispatching %10!s!.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_IoQueue_cpp163
    #define WPP_ANNOTATE_IoQueue_cpp163 WPP_ANNOTATE_IoQueue_cpp163_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemHRESULT -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_IoQueue_cpp163 WPP_ANNOTATE_IoQueue_cpp163_FINAL("TMF:", "IoQueue.cpp", "IoQueue_cpp163", L"{", L"hr, ItemHRESULT -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_IoQueue_cpp184_FINAL(P, File, Name, ...)    __annotation(L ## P, L"a35eafa1-ece0-e3a1-7c2d-92e530303c22 Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 18 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_IoQueue_cpp184_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 18 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_IoQueue_cpp184
    #define WPP_ANNOTATE_IoQueue_cpp184 WPP_ANNOTATE_IoQueue_cpp184_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_IoQueue_cpp184 WPP_ANNOTATE_IoQueue_cpp184_FINAL("TMF:", "IoQueue.cpp", "IoQueue_cpp184", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_IoQueue_cpp227_FINAL(P, File, Name, ...)    __annotation(L ## P, L"a35eafa1-ece0-e3a1-7c2d-92e530303c22 Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 19 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_IoQueue_cpp227_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 19 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_IoQueue_cpp227
    #define WPP_ANNOTATE_IoQueue_cpp227 WPP_ANNOTATE_IoQueue_cpp227_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_IoQueue_cpp227 WPP_ANNOTATE_IoQueue_cpp227_FINAL("TMF:", "IoQueue.cpp", "IoQueue_cpp227", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_IoQueue_cpp231_FINAL(P, File, Name, ...)    __annotation(L ## P, L"a35eafa1-ece0-e3a1-7c2d-92e530303c22 Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 20 \"%0%!FUNC!NULL pointer to device object.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_IoQueue_cpp231_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 20 \"%0%!FUNC!NULL pointer to device object.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_IoQueue_cpp231
    #define WPP_ANNOTATE_IoQueue_cpp231 WPP_ANNOTATE_IoQueue_cpp231_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_IoQueue_cpp231 WPP_ANNOTATE_IoQueue_cpp231_FINAL("TMF:", "IoQueue.cpp", "IoQueue_cpp231", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_IoQueue_cpp270_FINAL(P, File, Name, ...)    __annotation(L ## P, L"a35eafa1-ece0-e3a1-7c2d-92e530303c22 Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 21 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_IoQueue_cpp270_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 21 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_IoQueue_cpp270
    #define WPP_ANNOTATE_IoQueue_cpp270 WPP_ANNOTATE_IoQueue_cpp270_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_IoQueue_cpp270 WPP_ANNOTATE_IoQueue_cpp270_FINAL("TMF:", "IoQueue.cpp", "IoQueue_cpp270", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_IoQueue_cpp46_FINAL(P, File, Name, ...)    __annotation(L ## P, L"a35eafa1-ece0-e3a1-7c2d-92e530303c22 Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 10 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_IoQueue_cpp46_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 10 \"%0%!FUNC! Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_IoQueue_cpp46
    #define WPP_ANNOTATE_IoQueue_cpp46 WPP_ANNOTATE_IoQueue_cpp46_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_IoQueue_cpp46 WPP_ANNOTATE_IoQueue_cpp46_FINAL("TMF:", "IoQueue.cpp", "IoQueue_cpp46", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_IoQueue_cpp54_FINAL(P, File, Name, ...)    __annotation(L ## P, L"a35eafa1-ece0-e3a1-7c2d-92e530303c22 Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 11 \"%0%!FUNC! Failed to create instance %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_IoQueue_cpp54_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 11 \"%0%!FUNC! Failed to create instance %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_IoQueue_cpp54
    #define WPP_ANNOTATE_IoQueue_cpp54 WPP_ANNOTATE_IoQueue_cpp54_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemHRESULT -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_IoQueue_cpp54 WPP_ANNOTATE_IoQueue_cpp54_FINAL("TMF:", "IoQueue.cpp", "IoQueue_cpp54", L"{", L"hr, ItemHRESULT -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_IoQueue_cpp67_FINAL(P, File, Name, ...)    __annotation(L ## P, L"a35eafa1-ece0-e3a1-7c2d-92e530303c22 Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 12 \"%0%!FUNC! Failed to initialize %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_IoQueue_cpp67_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 12 \"%0%!FUNC! Failed to initialize %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_IoQueue_cpp67
    #define WPP_ANNOTATE_IoQueue_cpp67 WPP_ANNOTATE_IoQueue_cpp67_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemHRESULT -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_IoQueue_cpp67 WPP_ANNOTATE_IoQueue_cpp67_FINAL("TMF:", "IoQueue.cpp", "IoQueue_cpp67", L"{", L"hr, ItemHRESULT -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_IoQueue_cpp78_FINAL(P, File, Name, ...)    __annotation(L ## P, L"a35eafa1-ece0-e3a1-7c2d-92e530303c22 Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 13 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_IoQueue_cpp78_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"Driver // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 13 \"%0%!FUNC! Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TRACE_QUEUE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_IoQueue_cpp78
    #define WPP_ANNOTATE_IoQueue_cpp78 WPP_ANNOTATE_IoQueue_cpp78_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_IoQueue_cpp78 WPP_ANNOTATE_IoQueue_cpp78_FINAL("TMF:", "IoQueue.cpp", "IoQueue_cpp78", L"{", L"}")
#endif
# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#else
# define WPP_ANNOTATE(x)
#endif


#if 1
#if !defined(WPP_USER_MSG_GUID)

#define WPP_LOCAL_TraceGuids WPP_a35eafa1ece0e3a17c2d92e530303c22_Traceguids
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0xa35eafa1,0xece0,0xe3a1,{0x7c,0x2d,0x92,0xe5,0x30,0x30,0x3c,0x22}}, };

#else

#define WPP_LOCAL_MSG_VAR(Guid) WPP_XGLUE3(WPP_, WPP_GUID_NORM Guid, _Traceguids)

#define WPP_LOCAL_MSG_GUID(Guid) \
extern const __declspec(selectany) GUID WPP_LOCAL_MSG_VAR(Guid)[] = { WPP_GUID_STRUCT Guid }

WPP_LOCAL_MSG_GUID(WPP_USER_MSG_GUID);
#define WPP_LOCAL_TraceGuids WPP_LOCAL_MSG_VAR(WPP_USER_MSG_GUID)

#endif
#endif


#ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_TRACE_OPTIONS)
enum {WPP_TRACE_OPTIONS = TRACE_MESSAGE_SEQUENCE   | TRACE_MESSAGE_GUID
                        | TRACE_MESSAGE_SYSTEMINFO | TRACE_MESSAGE_TIMESTAMP };
#endif

#if !defined(WPP_LOGPAIR)
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((SIZE_T)(_Size)),
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#if !defined(WPP_LOGASTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR(strlen(_value) + 1, _value )
# else
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( (_value)?strlen(_value) + 1:5, (_value)?(_value):"NULL" )
# endif
#endif

#if !defined(WPP_LOGWSTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( (wcslen(_value)+1) * sizeof(WCHAR), _value)
# else
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( (_value)?(((_value)[0] == 0)?7 * sizeof(WCHAR):(wcslen(_value) + 1)* sizeof(WCHAR)):5 * sizeof(WCHAR), (_value)?(((_value)[0] == 0) ? L"<NULL>" : (_value)):L"NULL")
# endif
#endif

#if !defined(WPP_LOGPGUID)
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif


#if !defined(WPP_LOGPSID)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( WPP_GetLengthSid(_value), (_value) )
# else
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( (_value)? (WPP_IsValidSid(_value)? \
                                                                        WPP_GetLengthSid(_value):5):5, \
                                                                        (_value)? (WPP_IsValidSid(_value)?\
                                                                        (_value):"NULL"):"NULL")
#endif
#endif

#if !defined(WPP_LOGCSTR)
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGUSTR)
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGPUSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#else
# define WPP_LOGPUSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x && (*(_x)).Length)? &(*(_x)).Length : L"\5")\
                          WPP_LOGPAIR( (_x && (*(_x)).Buffer)?(*(_x)).Length:5*sizeof(WCHAR), (_x && (*(_x)).Buffer)?(*(_x)).Buffer:L"NULL")
#endif
#endif

#if !defined(WPP_LOGPCSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#else
# define WPP_LOGPCSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x && (*(_x)).Length)? &(*(_x)).Length : L"\5")\
                          WPP_LOGPAIR( (_x && (*(_x)).Buffer)?(*(_x)).Length:5*sizeof(char), (_x && (*(_x)).Buffer)?((const char *)(*(_x)).Buffer):"NULL")
#endif
#endif

#if !defined(WPP_LOGSTDSTR)
#define WPP_LOGSTDSTR(_value)  WPP_LOGPAIR( (_value).size()+1, (_value).c_str() )
#endif

#endif  //  #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_CHECK_INIT)
# define WPP_CHECK_INIT (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && 
#endif


#ifndef WPP_SF__def
#       define WPP_SF__def
WPP_INLINE void WPP_SF_(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id,  0); }
#endif  // #ifndef WPP_SF__def
#ifndef WPP_SF_d_def
#       define WPP_SF_d_def
WPP_INLINE void WPP_SF_d(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, signed int _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(signed int,_a1)  0); }
#endif  // #ifndef WPP_SF_d_def
#ifndef WPP_POST
#  define WPP_POST()
#endif

#ifndef WPP_PRE
#  define WPP_PRE()
#endif

#ifndef WPP_LOG_ALWAYS
#  define WPP_LOG_ALWAYS(...)
#endif      

#ifdef WPP_DEBUG
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp110(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp110) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 14, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp124(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp124) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 15, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp141(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp141) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 16, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp163(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp163) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 17, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp184(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp184) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 18, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp227(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp227) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 19, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp231(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp231) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 20, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp270(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp270) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 21, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp46(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp46) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 10, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp54(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp54) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 11, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp67(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp67) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 12, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp78(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG)\
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp78) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 13, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp110(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp110) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 14, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp124(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp124) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 15, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp141(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp141) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 16, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp163(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp163) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 17, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp184(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp184) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 18, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp227(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp227) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 19, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp231(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp231) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 20, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp270(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp270) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 21, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp46(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp46) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 10, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp54(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp54) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 11, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp67(LEVEL, FLAGS, MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp67) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 12, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_IoQueue_cpp78(LEVEL, FLAGS, MSG) \
     WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS),MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(IoQueue_cpp78) \
     ( ( \
         WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 13, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif


#ifdef WPP_DEBUG
#else
#endif



#if defined(__cplusplus)
};
#endif


//
// Tracing Macro name redefinition
//

// NoMsgArgs

#undef DoDebugTrace
#define DoDebugTrace WPP_(CALL)
#undef DoTraceMessage
#define DoTraceMessage WPP_(CALL)
#undef Trace
#define Trace WPP_(CALL)
#undef TraceEvents
#define TraceEvents WPP_(CALL)
// MsgArgs

